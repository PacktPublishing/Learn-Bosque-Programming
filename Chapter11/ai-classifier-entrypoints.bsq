
namespace NSMain;

typedef Sample = [Float64, Float64, Float64, Float64];

entity Perceptron {
    field weights: List<Float64>;
    field alfa: Float64 = 1.0f;
    field currentSample: Int = 0;
}

function activation(s: Float64): Float64 {
    return if (Float64::compare(s, 0.0f) == 1) 1.0f else 0.0f;
}

function multiplyVectors(
    vector1: List<Float64>,
    vector2: List<Float64>
): Float64 {
    return Float64::sum(
        vector1.mapIndex<Float64>(
            fn(el, i) => Float64::product(
                List<Float64>@{ el, vector2.get(i) }
            )
        )
    );
}

function train(
    perceptron: Perceptron,
    trainData: List<Sample>,
    pNum: Int
): Perceptron {
    return NSIterate::steps<Perceptron>(
        perceptron,
        trainData.size(),
        fn(perc) => {
            let { weights = w, currentSample = i, alfa = a } = perc.{ weights, currentSample, alfa };
            let [x, y, target1, target2] = trainData.get(i);
            let target = if (pNum == 1) target1 else target2;
            let sum = multiplyVectors(List<Float64>@{x, y}, w);
            let output = activation(sum);

            let w1 = w.get(0) + a * (target - output) * x;
            let w2 = w.get(1) + a * (target - output) * y;

            return perc.update(
                weights = List<Float64>@{w1, w2},
                currentSample = i + 1
            );
        }
    );
}

function classify(x: Float64, y: Float64, perceptron: Perceptron): Float64 {
    let sum = multiplyVectors( List<Float64>@{ x, y }, perceptron.weights );
    return activation(sum);
}

function eq(a: Float64, b: Float64): Bool {
    return Float64::compare(a, b) == 0;
}

function getQuadrant(p1Out: Float64, p2Out: Float64): String {
     let o1, o2 = p1Out, p2Out;
     return if(eq(o1, 1.0f) && eq(o2, 1.0f)) "Quadrant 1"
            elif(eq(o1, 1.0f) && eq(o2, 0.0f)) "Quadrant 2"
            elif(eq(o1, 0.0f) && eq(o2, 0.0f)) "Quadrant 3"
            elif(eq(o1, 0.0f) && eq(o2, 1.0f)) "Quadrant 4"
            else "Unknown";
}

function testModel(
    p1w1: Float64, p1w2: Float64,
    p2w1: Float64, p2w2: Float64
): String {

   var p1 = Perceptron@{ List<Float64>@{ p1w1, p1w2 } };
    var p2 = Perceptron@{ List<Float64>@{ p2w1, p2w2 } };

   let testSet = List<Sample>@{
        [58.0f, 8.0f, 1.0f, 1.0f], [81.0f, 29.0f, 1.0f, 1.0f],
        [24.0f, -15.0f, 0.0f, 1.0f], [88.0f, 4.0f, 1.0f, 1.0f],
        [-61.0f, 80.0f, 1.0f, 0.0f], [51.0f, -99.0f, 0.0f, 1.0f],
        [59.0f, -21.0f, 0.0f, 1.0f], [-59.0f, -47.0f, 0.0f, 0.0f],
        [-15.0f, -8.0f, 0.0f, 0.0f], [77.0f, -53.0f, 0.0f, 1.0f],
        [-72.0f, -76.0f, 0.0f, 0.0f], [-91.0f, 71.0f, 1.0f, 0.0f],
        [67.0f, 55.0f, 1.0f, 1.0f], [97.0f, -17.0f, 0.0f, 1.0f],
        [-6.0f, -67.0f, 0.0f, 0.0f]
   };

   _debug("Performing validation of the model...");

   let invalid = NSIterate::reduce<Int>(
        0,
        ListOf::range(0, testSet.size()),
        fn(acc, i) => {
            let [x, y, target1, target2] = testSet.get(i);
            let p1Out = classify(x, y, p1);
            let p2Out = classify(x, y, p2);

           if (!eq(p1Out, target1) || !eq(p2Out, target2)) {
                _debug(List<String | Float64>@{
                    "---- Invalid output! ----",
                    "Expected: ", target1, target2,
                    "Got: ", p1Out, p2Out,
                    "For input: ", x, y
                });
                return acc + 1;
            }

           return acc;
        }
    );

   _debug(List<String | Int>@{
        "Test ended. Number of invalid outputs:", invalid,
        "; Total samples: ", testSet.size()
    });

   return "Done.";
}

entrypoint function preTrain(): List<Float64> {
    let trainSet = List<Sample>@{
        [5.0f, -5.0f, 0.0f, 1.0f],
        [-5.0f, -5.0f, 0.0f, 0.0f],
        [-5.0f, 5.0f, 1.0f, 0.0f],
        [5.0f, 5.0f, 1.0f, 1.0f],
        [4.0f, 0.0f, 1.0f, 1.0f],
        [9.0f, 9.0f, 1.0f, 1.0f],
        [9.0f, -3.0f, 0.0f, 1.0f],
        [5.0f, -6.0f, 0.0f, 1.0f],
        [5.0f, -10.0f, 0.0f, 1.0f],
        [6.0f, 8.0f, 1.0f, 1.0f],
        [-6.0f, 3.0f, 1.0f, 0.0f],
        [-7.0f, 6.0f, 1.0f, 0.0f],
        [-7.0f, -1.0f, 0.0f, 0.0f],
        [-6.0f, -6.0f, 0.0f, 0.0f]
    };

    var p1 = Perceptron@{ weights = List<Float64>@{1.0f, 3.0f} };
    var p2 = Perceptron@{ weights = List<Float64>@{2.0f, 4.0f} };

    p1 = train(p1, trainSet, 1);
    p2 = train(p2, trainSet, 2);

    let trainedWeights = List<Float64>::concat(
        p1.weights, p2.weights
    );

    NSMain::testModel(
        trainedWeights.get(0),
        trainedWeights.get(1),
        trainedWeights.get(2),
        trainedWeights.get(3)
    );

    return trainedWeights;
}

entrypoint function run(
    p1w1: String,
    p1w2: String,
    p2w1: String,
    p2w2: String,
    x: String,
    y: String
): String {
    var p1 = Perceptron@{
        weights = List<Float64>@{
            Float64::parse(p1w1), Float64::parse(p1w2)
        }
    };

    var p2 = Perceptron@{
        weights = List<Float64>@{
            Float64::parse(p2w1), Float64::parse(p2w2)
        }
    };

    let p1Out = classify(Float64::parse(x), Float64::parse(y), p1);
    let p2Out = classify(Float64::parse(x), Float64::parse(y), p2);

    return getQuadrant(p1Out, p2Out);
}
