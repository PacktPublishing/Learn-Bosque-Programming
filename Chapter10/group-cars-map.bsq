namespace NSMain;

entity Car {
    field name: String;
    field year: Int;
}

entity CarGroup {
    field name: String;
    field years: List<Int>;
}

function groupCars(cars: List<Car>): List<CarGroup> {
    let names = cars.map<String>(fn(c) => c.name); /* 1. */
    let years = cars.map<Int>(fn(c) => c.year); /* 2. */

    let joined = names.joinGroup<Int>( /* 3. */
        years,
        fn(name, year) => cars.anyOf(
            fn(c) => c.name == name && c.year == year
        )
    );
    let result = names.unique().map<CarGroup>( /* 4. */
        fn(n) => {
            [let name, let years] = joined.find(fn(t) => n == t.0);
            return CarGroup@{ name, years };
        }
    );

    return result;
}

entrypoint function main(): List<CarGroup> {
    let cars = List<Car>@{
        Car@{ "Audi", 2001 }, Car@{ "Ford", 2002 },
        Car@{ "Ford", 2002 }, Car@{ "Ford", 2004 },
        Car@{ "Audi", 2003 }, Car@{ "BMW", 2020 }
    };
    return groupCars(cars);
}
