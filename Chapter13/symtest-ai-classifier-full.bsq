namespace NSMain;

typedef Sample = [Int, Int, Int];
typedef WeightsVector = List<Int>;
typedef InputsVector = List<Int>;
typedef Quarter = /^Quarter [1-4]|Unknown$/;

entity Perceptron {
    field weights: WeightsVector;
    field alfa: Int = 1;
    field currentSample: Int = 0;

    invariant $weights.size() == 2;
}

function activation(s: Int): Int {
    return if (s > 0) 1 else 0;
}

function multiplyVectors(
    vector1: List<Int>,
    vector2: List<Int>
): Int {
    return vector1
        .mapIndex<Int>(fn(el, i) => el * vector2.get(i))
        .sum();
}

function train(
    perceptron: Perceptron,
    trainData: List<Sample>
): Perceptron {
    return NSIterate::steps<Perceptron>(
        perceptron,
        trainData.size(),
        fn(perc) => {
            let { weights = w, currentSample = i, alfa = a } = perc.{ weights, currentSample, alfa };
            let [x, y, target] = trainData.get(i);
            let sum = multiplyVectors(InputsVector@{x, y}, w);
            let output = activation(sum);

            let w1 = w.get(0) + a * (target - output) * x;
            let w2 = w.get(1) + a * (target - output) * y;

            return perc.update(
                weights = WeightsVector@{w1, w2},
                currentSample = i + 1
            );
        }
    );
}

function classify(inputs: InputsVector, perceptron: Perceptron): Int
    ensures $return == 0 || $return == 1;
{
    let sum = multiplyVectors(inputs, perceptron.weights);
    return activation(sum);
}

function getQuarter(p1Out: Int, p2Out: Int): SafeString<Quarter> {
    return if(p1Out == 1 && p2Out == 1) Quarter'Quarter 1'
           elif(p1Out == 1 && p2Out == 0) Quarter'Quarter 2'
           elif(p1Out == 0 && p2Out == 0) Quarter'Quarter 3'
           elif(p1Out == 0 && p2Out == 1) Quarter'Quarter 4'
           else Quarter'Unknown';
}

function inIntBounds(...values: List<Int>): Bool {
    return values.allOf(
        fn(v) => v >= Int::min_value && v <= Int::max_value
    );
}

entrypoint function preTrain(): List<Int> {
    let trainSet1 = List<Sample>@{
        [5, -5, 0],
        [-5, -5, 0],
        [-5, 5, 1],
        [5, 5, 1]
    };
    let trainSet2 = List<Sample>@{
        [5, -5, 1],
        [-5, -5, 0],
        [-5, 5, 0],
        [5, 5, 1]
    };

    var p1 = Perceptron@{ WeightsVector@{1, 3} };
    var p2 = Perceptron@{ WeightsVector@{2, 4} };

    p1 = train(p1, trainSet1);
    p2 = train(p2, trainSet2);

    return List<Int>::concat(p1.weights, p2.weights);
}

entrypoint function run(
    p1w1: Int,
    p1w2: Int,
    p2w1: Int,
    p2w2: Int,
    x: Int,
    y: Int
): String
    requires release inIntBounds(p1w1, p1w2, p2w1, p2w2, x, y);
{
    var p1 = Perceptron@{ WeightsVector@{ p1w1, p1w2 } };
    var p2 = Perceptron@{ WeightsVector@{ p2w1, p2w2 } };

    let inputs = InputsVector@{ x, y };
    let p1Out = classify(inputs, p1);
    let p2Out = classify(inputs, p2);

    return getQuarter(p1Out, p2Out).string();
}
